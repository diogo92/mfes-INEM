class TestHospital

  types
    public HospitalLevel = Hospital`HospitalLevel;
		public BraceletColor = Hospital`BraceletColor;
		public Location = Hospital`Location;
		public PatientCapacity = Hospital`PatientCapacity;
		public MedicsInHospital = Hospital`MedicsInHospital;
		public Patient = Hospital`Patient; 
		public Medic = Hospital`Medic; 
		public Vehicle = Hospital`Vehicle;
		public HospitalAssignment = Hospital`HospitalAssignment; 
		public EmergencyAssignment = Hospital`EmergencyAssignment; 

    public TestCase ::
    					hospital: Hospital  
    					location: Location
              id: nat
							level: HospitalLevel
							waitingList: seq of Patient
							assignments: seq of HospitalAssignment;
							

    public TestResult :: testCase : TestCase
                  			 finalHospitalAssignment: HospitalAssignment
                  			 isAssigned: bool;
                  			 
		
  values
  	
    p1: Patient = mk_Hospital`Patient(<GREEN>);
    p2: Patient = mk_Hospital`Patient(<YELLOW>);
    p3: Patient = mk_Hospital`Patient(<YELLOW>);
    p4: Patient = mk_Hospital`Patient(<GREEN>);
		p5: Patient = mk_Hospital`Patient(<RED>);
		p6: Patient = mk_Hospital`Patient(<RED>);
		p7: Patient = mk_Hospital`Patient(<YELLOW>);
		p8: Patient = mk_Hospital`Patient(<RED>);
		
		
    m1: Medic = mk_token(1);
    m2: Medic = mk_token(2);
    m3: Medic = mk_token(3);
    m4: Medic = mk_token(4);

		v1: Vehicle = mk_token(1);
		v2: Vehicle = mk_token(2);
		v3: Vehicle = mk_token(3);
		v4: Vehicle = mk_token(4);
		
		l: Location = mk_token(1);
		h:	Hospital = new Hospital(5,3,[m1,m2,m3,m4],[v1,v2,v3,v4]);
		
    testCases : seq of TestCase = [
      mk_TestCase(h,l, 1, 3, [p1,p2,p3,p4,p5,p6,p7,p8],[{m1 |->p1},{m2|->p2},{m3|->p3},{m4|->p4}])
      ];

   functions
   
   		--Tests if an assignment made from a Medic to a Patient enters the assignment list, the patient is off the waiting list
   		--and if the Medic is unavailable
   	 private isAssigned( t:TestCase, actualAssignment: HospitalAssignment, wl: seq of Patient, am,um: seq of Medic) res: bool ==
   	 (
   	 	if (actualAssignment in set elems t.assignments) then
   	 		if not(exists i in set dom actualAssignment & i in set elems am) then 
   	 			if (exists j in set dom actualAssignment & j in set elems um) then
   	 				if not (exists k in set rng actualAssignment & k in set elems wl) then
   	 					true
   	 				else false
   	 			else false
   	 		else false
   	 	else false
   	 );
   	 
  operations 
  
    public RunTests() res: seq of TestResult ==
    (
			 dcl rr: seq of TestResult := [];
       dcl a : HospitalAssignment;
       dcl t : TestCase;
       dcl r : TestResult;
       for all i in set inds testCases do
       (
         t := testCases(i);
   	 		 t.hospital.waitingList:=t.waitingList;
         a := Hospital`assignMedicToPatient(t.hospital.waitingList(i), t.hospital.availableMedics(i));
         r := mk_TestResult(t, a, isAssigned(t, a,t.hospital.waitingList,t.hospital.availableMedics,t.hospital.unavailableMedics));
         if r.isAssigned then 
         	rr := rr ^ [r]
       );
       return rr
    );

end TestHospital
