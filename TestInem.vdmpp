class TestInem
/*
Class where the tests are implemented   
*/
instance variables
     i : Inem := new Inem(6);
     
      numEmergencies:nat:=0;
traces
        
operations
   private assertFalse: bool ==> bool
   assertFalse(cond) == return cond = false;
   
   private assertSensor: nat ==> bool
   assertSensor(num) == (
   			return num = c.numSensor;
   );
   
   private assertEqual: ? * ? ==> bool
   assertEqual(newer, old) == (
   			return newer = old;
   );
   
   --tests if an emergency is correctly assisted. A hospital best suited to attend it
   -- should dispatch a vehicle and the patient should be put in the waiting list
   -- of the hospital
   private testEmergency: () ==> ()
   	testEmergency() ==
   	(
   		i.attendEmergency(emergency);
   	);
   	
   private makeEmergency:() ==> Inem`Emergency
   		makeEmergency() ==
   		(
   			dcl em:Inem`Emergency;
   			dcl pat:Patient;
   			dcl pos:Position:=new Position(MATH`rand(999)+1,MATH`rand(999)+1);
   			dcl accessN: nat:= MATH`rand(2)+1;
   			dcl access: <EASY> | <MODERATE> | <HARD> ;
   			if(accessN = 1) then access:=<EASY>
   				else(if(accessN = 2) then access:=<MODERATE>
   					else(access:=<HARD>));
   			em.patient:=pat;
   			em.pos:=pos;
   			em.access:=access;
   			return em;
   	);
   	
   	private generateEmergencies:nat1 ==>()
   		generateEmergencies(numEm)==(
   			dcl n:nat:=1;
   			dcl em:Inem`Emergency;
				while n<=numEm do(
					em:=makeEmergency();
					n:=n+1;
					numEmergencies:= numEmergencies+1;
					i.addEmergency(em);
				);
   		);
      
end TestInem