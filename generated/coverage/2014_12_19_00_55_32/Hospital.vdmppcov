class Hospital -- Represents a Health Unit
	types
		public HospitalLevel = nat;
		public BraceletColor = <RED>|<YELLOW>|<GREEN>;
		public Location = Position;
		public HospitalPatient:: patientCondition: Patient`ConditionColor;
		public PatientCapacity = nat; -- Max patient capacity
		public MedicsInHospital = nat;
	  public Medic = token; 
	  public Vehicle = Transport;
		public HospitalAssignment = inmap Medic to HospitalPatient; 
		public EmergencyAssignment = inmap Vehicle to HospitalPatient; 
		
	instance variables
	
		public pos : Location;
		public static capacity: PatientCapacity :=0;
		public numOfMedics: nat :=0;
		public numOfVehicles: nat :=0;
		public static level: HospitalLevel :=0;
		public static waitingList: seq of HospitalPatient :=[]; -- Patients waiting to be assigned; there cannot be more patients than the hospital capacity
		public static availableMedics: seq of Medic :=[]; -- Medics available in the hospital
		public static unavailableMedics: seq of Medic :=[]; -- Medics assigned to an appointment with a patient
		public static availableVehicles: seq of Vehicle :=[]; -- Vehicles available in the hospital to provide emergency assistance
		public static unavailableVehicles: seq of Vehicle :=[]; -- Vehicles that are providing assistance to an emergencys
		public static hospitalAssignments: seq of HospitalAssignment :=[]; -- Assignments from  doctors to patients
		public static emergencyAssignments: seq of EmergencyAssignment :=[]; -- Vehicle assistances to emergencies
	operations
	
	
		public Hospital: nat1 * nat1 * nat1 * nat1 * Position ==> Hospital
			Hospital(patientCap,hLevel,medics,vehicles,loc) == (
				dcl i:nat;
				dcl v:nat;
				dcl lv:Transport`Level;
				pos:=loc;
				capacity:= patientCap;
				level:=hLevel;
					i:=1;
					while i<=medics do(
						addMedic();
							i:=i+1;
							numOfMedics := numOfMedics+1;
							);
					i:=1;
					while i<=vehicles do(
						v:=MATH`rand(2)+1;
						if(v=1) then lv:=<MOTORCYCLE> else if (v=2) then lv := <AMBULANCE> else lv:=<HELICOPTER>;
						addVehicle(lv);
							i:=i+1;
							numOfVehicles := numOfVehicles+1;
							);
				return self;
			);
		
		-- Adds a medic to the list
		public addMedic: () ==>()
			addMedic()== (
				dcl m:Medic:=mk_token(1);
				
				availableMedics:=availableMedics^[m];
			);
		
		-- Adds a vehicle to the list
		public addVehicle:(Transport`Level)==>()
			addVehicle(lv)== (
				dcl v:Vehicle:= new Transport(lv);
				availableVehicles:=availableVehicles^[v];
			);
			
			
		-- Assigns a medic, if avaliable
		public static assignMedicToPatient: HospitalPatient * Medic ==> ()
		 assignMedicToPatient(p,m) == (
			
			dcl auxAssignment: HospitalAssignment := {|->};
			auxAssignment := (auxAssignment :-> {p}) munion {m |-> p};
			waitingList := remove[HospitalPatient](p,waitingList);
			availableMedics := remove[Medic](m,availableMedics);
			unavailableMedics := unavailableMedics^[m];
			hospitalAssignments := hospitalAssignments^[auxAssignment];
		)
		pre
			--Medic is available and in medics list
			elemExists[Medic](availableMedics,m)
			
			and -- Patient in patients list
			elemExists[HospitalPatient](waitingList,p)
	
		post
			-- Assigned medic removed from available list, and respective patient removed from waiting list
			not elemExists[Medic](availableMedics,m) 
			and elemExists[Medic](unavailableMedics,m)
			and not elemExists[HospitalPatient](waitingList,p)
			
			-- Assignment is in hospital assignment list
			and elemExists[HospitalAssignment](hospitalAssignments,{m|->p})
		;
		
		
		-- Put a patient in the waiting list, freeing the vehicle that did the transportation
		public putPatientInWaitingList: HospitalPatient * Vehicle * EmergencyAssignment ==>()
		 putPatientInWaitingList(p,v,assignment) ==(
		 	
			unavailableVehicles := remove[Vehicle](v,unavailableVehicles);
			availableVehicles := availableVehicles^[v];
			if not(p.patientCondition =<GREEN>)then waitingList := insertInOrder(waitingList,p);
			emergencyAssignments := remove[EmergencyAssignment](assignment,emergencyAssignments);
		)
			
		post
		-- Emergency not in assignment list
			not elemExists[EmergencyAssignment](emergencyAssignments,assignment)
		;
		
		
		-- A medic ends its apointment with a patient, freeing him
		public freeMedic: Medic * HospitalPatient * HospitalAssignment ==>()
		 freeMedic(m,p, assignment) ==(
			unavailableMedics := remove[Medic](m,unavailableMedics);
			availableMedics := availableMedics^[m];
			hospitalAssignments := remove[HospitalAssignment](assignment,hospitalAssignments);
		)
		pre
			-- Medic must be the one in the assigned apointment
			assignment={m|->p} 
			-- Hospital assignment in list
			and assignment in set elems hospitalAssignments
		post
			-- Medic is free
			m in set elems availableMedics
			-- Assignment not in list
			and not elemExists[HospitalAssignment](hospitalAssignments,assignment)
		;
	
	-- Assign a vehicle to attend an emergency
	public attendEmergency: Inem`Emergency * Transport`Level ==>()
	attendEmergency(em,trl)==
	(
		dcl auxAssignment: EmergencyAssignment := {|->};
		dcl nVehicle:nat:=0;
		dcl p:HospitalPatient:=mk_HospitalPatient(em.patient.patientCondition);
		for i=1 to len availableVehicles do
			if(availableVehicles(i).access=trl) then nVehicle:=i-1;
		
		auxAssignment := (auxAssignment :-> {p}) munion {availableVehicles(nVehicle) |-> p};
		availableVehicles := remove[Vehicle](availableVehicles(nVehicle),availableVehicles);
		if(nVehicle > len availableVehicles) then nVehicle := len availableVehicles;
		unavailableVehicles := unavailableVehicles^[availableVehicles(nVehicle)];
		emergencyAssignments := emergencyAssignments^[auxAssignment];
	)
	
	pre
		-- Bringing a patient must not overflow the capacity of the hospital
			len waitingList < capacity
	;

		public hasVehicle: Transport`Level  ==> bool
			hasVehicle(vlevel)==
			(
				for n=1 to len availableVehicles do
					if(availableVehicles(n).access=vlevel)
						then return true;
				return false;
			);
functions

		public insertInOrder(s:seq of HospitalPatient,p:HospitalPatient)  res: seq of HospitalPatient ==
			if(p.patientCondition = <RED>) then(
				if(not exists i in set inds s & s(i).patientCondition=<RED>)
					then([p]^s)
					else(
						insertInOrder(tl s,p)
					)
			)
			else if(p.patientCondition = <YELLOW>) then(
				if(not exists i in set inds s & s(i).patientCondition=<RED> and not exists j in set inds s & s(j).patientCondition=<YELLOW>)
					then([p]^s)
					else(
						insertInOrder(tl s,p)
					)
			)
			else(s^[p])
		;
		-- Checks if element is in list
		public elemExists[@T](s:seq of @T,m:@T) res: bool ==
			 m in set elems s;
			 
		public remove[@T](e: @T, s: seq of @T) res: seq of @T ==
    	[s(i) | i in set inds s & s(i) <> e];
	
end Hospital