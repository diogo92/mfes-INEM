class Inem
types
	-- An emergency that requires assistance pos indicates the position, patient refers to the person to be assisted
	-- and access indicates the quality/type of access to the position i.e. if it is a village with bad road access, a mountain.
	public Emergency::
		patient:Patient
		pos:Position
		access: <EASY>|<MODERATE>|<HARD>;
	
values
instance variables
 public numHospitals : nat := 0;
-- List of on going emergencies
	public static emergencies : seq of Emergency :=[];
-- List of hospitals
	public static hospitals: seq of Hospital :=[];
	
operations
	public Inem: nat ==> Inem
			Inem(numOfHospitals) == (
				dcl i:nat;
					i:=1;
					while i<=numOfHospitals do(
						addHospital();
							i:=i+1;
							numHospitals := numHospitals+1;
							);
				return self;
			);
			
	
	-- assigns an hospital to assist an emergency
	public attendEmergency: Emergency ==>()
		attendEmergency(em) == (
			bestHospital(em).attendEmergency(em,bestVehicleTypeToSend(em));
		);
	
	public attendAllEmergencies:() ==>()
		attendAllEmergencies()==
		(
			for n1=1 to len emergencies do
				attendEmergency(emergencies(n1));
			
			for n2=1 to len emergencies do
				emergencies:=tl emergencies;
			
		);
		
	public addEmergency: Emergency ==>()
			addEmergency(em) == (
				emergencies:=emergencies^[em];
	);
	
	public addHospital:()==>()
		addHospital()==(
			dcl nPatientCap:nat:=MATH`rand(19)+1;
			dcl nHospLevel:nat:=MATH`rand(2)+1;
			dcl nMedics:nat:=MATH`rand(14)+1;
			dcl nVehicles:nat:=MATH`rand(9)+1;
			dcl pos:Position:= new Position(MATH`rand(200)+1,MATH`rand(200)+1);
			hospitals:=hospitals^[new Hospital(nPatientCap,nHospLevel,nMedics,nVehicles,pos)];
	);
	
	-- checks the hospital best suited to attend an emergency, given the location and condition of the patient 
	
	public bestHospital: Emergency ==> Hospital
		bestHospital(em) == (
			dcl temp : Hospital:=new Hospital(1,1,1,1,new Position(10000000,100000000));
			for h = 1 to len hospitals do
				if (em.pos.getDistanceTo(temp.pos)>em.pos.getDistanceTo(hospitals(h).pos)) then(
					if(hospitals(h).hasVehicle(bestVehicleTypeToSend(em)) and len hospitals(h).waitingList<hospitals(h).capacity) then
						temp := hospitals(h);
					);
			return temp;
		);
		
	public bestVehicleTypeToSend: Emergency ==> Transport`Level
		bestVehicleTypeToSend(em) == (
			dcl t:Transport`Level;
			if(em.patient.patientCondition = <GREEN> and em.access = <EASY>) then(
				t:=<MOTORCYCLE>;
			)
			else(
				if((em.patient.patientCondition = <YELLOW> or em.patient.patientCondition = <RED>) and em.access = <HARD>)then(
					t:=<HELICOPTER>;
				)else(
					t:=<AMBULANCE>;
				)
			);
			return t;
		);
functions
	
traces

end Inem